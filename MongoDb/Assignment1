{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bd717874",
   "metadata": {},
   "source": [
    "# 17 feb mongodb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af36befe",
   "metadata": {},
   "source": [
    "Answer 1\n",
    "MongoDB is a NoSQL, document-based database that stores data in JSON-like documents, making it a popular choice for web and mobile applications that require flexible, scalable, and high-performance data storage. It is an open-source, cross-platform database that offers high availability, automatic scaling, and horizontal scaling features.\n",
    "\n",
    "Non-relational databases, also known as NoSQL databases, are databases that do not use a traditional relational database model, which means they do not use tables with rows and columns. Instead, they store data in a flexible and schema-less format such as documents, graphs, or key-value pairs. Non-relational databases are often preferred for their flexibility, scalability, and performance.\n",
    "\n",
    "MongoDB is preferred over SQL databases in scenarios where the data is unstructured or semi-structured, such as for web applications that require the storage of large volumes of unstructured data, such as social media posts, sensor data, or multimedia files. MongoDB is also a good choice when you need to store large amounts of data that may change frequently, as it allows for schema flexibility and dynamic updates.\n",
    "\n",
    "In summary, MongoDB is a popular NoSQL database that offers high performance, scalability, and flexibility, making it a good choice for web and mobile applications that require dynamic and unstructured data storage. Non-relational databases, in general, are preferred over SQL databases in scenarios where data is unstructured or semi-structured and where scalability and flexibility are important.\n",
    "\n",
    "Answer 2\n",
    "MongoDB is a powerful, flexible, and scalable NoSQL database that offers many features, including:\n",
    "\n",
    "Document-oriented storage: MongoDB stores data in flexible, JSON-like documents, which can have dynamic schemas and can be nested.\n",
    "\n",
    "High availability: MongoDB supports replica sets, which are groups of MongoDB servers that maintain multiple copies of data for high availability and automatic failover.\n",
    "\n",
    "Automatic sharding: MongoDB can automatically partition data across multiple servers, making it easy to scale horizontally.\n",
    "\n",
    "Indexing: MongoDB supports many types of indexes, including compound indexes, geospatial indexes, and text indexes, which help to optimize query performance.\n",
    "\n",
    "Aggregation framework: MongoDB's aggregation framework is a powerful tool for performing advanced data analysis, grouping, and aggregation on data.\n",
    "\n",
    "MapReduce: MongoDB supports MapReduce, a powerful data processing technique that allows for efficient processing of large datasets.\n",
    "\n",
    "Security: MongoDB provides several security features, including authentication, access control, encryption at rest, and auditing, to protect your data and ensure compliance with security standards.\n",
    "\n",
    "Schema flexibility: MongoDB's document-oriented data model allows for schema flexibility, making it easy to handle unstructured and semi-structured data.\n",
    "\n",
    "Dynamic updates: MongoDB allows for dynamic updates, so you can easily modify data in real-time without worrying about schema changes.\n",
    "\n",
    "In summary, MongoDB is a feature-rich NoSQL database that offers document-oriented storage, high availability, automatic sharding, indexing, aggregation, and MapReduce capabilities. It is also highly secure, flexible, and supports dynamic updates, making it a powerful choice for many different use cases.\n",
    "\n",
    "Answer 3\n",
    "here's an example code to connect to MongoDB from Python using the pymongo library, and create a database and a collection in MongoDB:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e4a8eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "\n",
    "# Establish a connection to the MongoDB server\n",
    "client = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n",
    "\n",
    "# Create a new database called \"mydatabase\"\n",
    "db = client[\"mydatabase\"]\n",
    "\n",
    "# Create a new collection called \"customers\" in the \"mydatabase\" database\n",
    "collection = db[\"customers\"]\n",
    "\n",
    "# Insert a document into the \"customers\" collection\n",
    "customer = {\"name\": \"John Doe\", \"email\": \"johndoe@example.com\"}\n",
    "result = collection.insert_one(customer)\n",
    "print(\"Inserted document with ID: {}\".format(result.inserted_id))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46976504",
   "metadata": {},
   "source": [
    "This code uses the pymongo library to connect to a MongoDB server running on the local machine at the default port 27017. It then creates a new database called \"mydatabase\" and a new collection called \"customers\" within that database. Finally, it inserts a new document (a customer) into the \"customers\" collection and prints the ID of the newly inserted document.\n",
    "\n",
    "Note that you will need to have the pymongo library installed to run this code. You can install it using pip by running the following command in your terminal or command prompt:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f23fd1",
   "metadata": {},
   "source": [
    "Question 4 : Using the database and the collection created in question number 3, write a code to insert one record, and insert many records. Use the find() and find_one() methods to print the inserted record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "934cf650",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "\n",
    "# Establish a connection to the MongoDB server\n",
    "client = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n",
    "\n",
    "# Get the \"mydatabase\" database and \"customers\" collection\n",
    "db = client[\"mydatabase\"]\n",
    "collection = db[\"customers\"]\n",
    "\n",
    "# Insert one record into the \"customers\" collection\n",
    "customer1 = {\"name\": \"Jane Doe\", \"email\": \"janedoe@example.com\"}\n",
    "result1 = collection.insert_one(customer1)\n",
    "print(\"Inserted document with ID: {}\".format(result1.inserted_id))\n",
    "\n",
    "# Insert many records into the \"customers\" collection\n",
    "customers2 = [\n",
    "  {\"name\": \"Bob Smith\", \"email\": \"bobsmith@example.com\"},\n",
    "  {\"name\": \"Alice Johnson\", \"email\": \"alicejohnson@example.com\"},\n",
    "  {\"name\": \"Charlie Brown\", \"email\": \"charliebrown@example.com\"}\n",
    "]\n",
    "result2 = collection.insert_many(customers2)\n",
    "print(\"Inserted {} documents with IDs: {}\".format(len(result2.inserted_ids), result2.inserted_ids))\n",
    "\n",
    "# Find and print the first record in the \"customers\" collection\n",
    "customer = collection.find_one()\n",
    "print(customer)\n",
    "\n",
    "# Find and print all records in the \"customers\" collection\n",
    "customers = collection.find()\n",
    "for customer in customers:\n",
    "    print(customer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "284f0f9b",
   "metadata": {},
   "source": [
    "Question 5: Explain how you can use the find() method to query the MongoDB database. Write a simple code to demonstrate this.\n",
    "Answer :\n",
    "The find() method is used to query a MongoDB database and retrieve data from a specific collection. It allows you to search for documents in the collection that match a specific set of criteria, such as a particular value in a field, a range of values, or a regular expression pattern.\n",
    "\n",
    "The find() method takes an optional query object as its argument, which defines the criteria for the search. This query object is typically constructed using a set of key-value pairs, where each key represents a field in the document and each value represents the value to search for in that field. The find() method returns a cursor to the resulting documents, which can be iterated over to access the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f059aa69",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "\n",
    "# Establish a connection to the MongoDB server\n",
    "client = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n",
    "\n",
    "# Get the \"mydatabase\" database and \"customers\" collection\n",
    "db = client[\"mydatabase\"]\n",
    "collection = db[\"customers\"]\n",
    "\n",
    "# Query the \"customers\" collection for all documents\n",
    "all_customers = collection.find()\n",
    "for customer in all_customers:\n",
    "    print(customer)\n",
    "\n",
    "# Query the \"customers\" collection for documents where the \"name\" field is \"John Doe\"\n",
    "query = {\"name\": \"John Doe\"}\n",
    "john_doe_customers = collection.find(query)\n",
    "for customer in john_doe_customers:\n",
    "    print(customer)\n",
    "\n",
    "# Query the \"customers\" collection for documents where the \"age\" field is greater than 25\n",
    "query = {\"age\": {\"$gt\": 25}}\n",
    "age_gt_25_customers = collection.find(query)\n",
    "for customer in age_gt_25_customers:\n",
    "    print(customer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "123365db",
   "metadata": {},
   "source": [
    "Question 6: Explain the sort() method. Give an example to demonstrate sorting in MongoDB.\n",
    "\n",
    "The sort() method is used to sort the results of a query in MongoDB. You can specify one or more fields by which to sort the results, and you can sort the results in ascending or descending order.\n",
    "\n",
    "The sort() method takes an optional parameter that specifies the sort order. If the parameter is 1, the results are sorted in ascending order; if the parameter is -1, the results are sorted in descending order.\n",
    "\n",
    "Here's an example to demonstrate sorting in MongoDB using the sort() method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8094aad",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "\n",
    "# Establish a connection to the MongoDB server\n",
    "client = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n",
    "\n",
    "# Get the \"mydatabase\" database and \"customers\" collection\n",
    "db = client[\"mydatabase\"]\n",
    "collection = db[\"customers\"]\n",
    "\n",
    "# Query the \"customers\" collection and sort the results by the \"name\" field in ascending order\n",
    "sorted_customers = collection.find().sort(\"name\", 1)\n",
    "\n",
    "# Print the sorted results\n",
    "for customer in sorted_customers:\n",
    "    print(customer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40e9edcd",
   "metadata": {},
   "source": [
    "In this example, we first connect to the MongoDB server and retrieve the \"mydatabase\" database and \"customers\" collection. We then use the find() method to query the \"customers\" collection for all documents, and sort the results by the \"name\" field in ascending order using the sort() method.\n",
    "\n",
    "We then print each document in the resulting cursor object, which contains the sorted results of the query. By default, the sort() method sorts the results in ascending order if no sort order is specified, so we explicitly specified the 1 parameter to indicate that we want to sort in ascending order by the \"name\" field.\n",
    "\n",
    "You can also sort by multiple fields by passing a list of fields and sort orders to the sort() method. For example, you could sort by the \"name\" field in ascending order, and then by the \"age\" field in descending order, by passing the following list to the sort() method: [(\"name\", 1), (\"age\", -1)].\n",
    "\n",
    "\n",
    "Question 7 : Explain why delete_one(), delete_many(), and drop() is used.\n",
    "Answer 7\n",
    "delete_one(), delete_many(), and drop() are methods used in MongoDB to delete documents or collections from the database.\n",
    "\n",
    "delete_one() is used to delete a single document from a collection that matches a specified filter. The method takes a filter parameter that specifies the document to be deleted, and it deletes the first document that matches the filter. If no document matches the filter, the method does nothing.\n",
    "\n",
    "delete_many() is used to delete multiple documents from a collection that match a specified filter. The method takes a filter parameter that specifies the documents to be deleted, and it deletes all documents that match the filter. If no documents match the filter, the method does nothing.\n",
    "\n",
    "drop() is used to delete an entire collection from the database. The method does not take any parameters, and it deletes the entire collection and all of its documents.\n",
    "\n",
    "These methods are useful in scenarios where you need to remove data from the database. For example, if you have a collection of user data, you may want to use delete_one() to remove a single user's data when they delete their account, or delete_many() to remove multiple users' data at once. If you decide to remove a collection entirely, you can use the drop() method.\n",
    "\n",
    "It's important to be careful when using these methods, as they can permanently delete data from the database. Always make sure you have a backup of your data before performing any delete operations, and double-check that you're deleting the correct documents or collections before executing the delete methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdd8f101",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15113dc1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45adbe27",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40e209db",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8980bc6e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b76cec04",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fb03ee9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59900943",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bff25ab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8685e738",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ef34026",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52a7d3da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75e3dbbe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52069256",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44d68ded",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d481f3c4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de821025",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24d4eb38",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e4d9b8b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
